pipeline {
    agent any
    tools {
                // Install the Maven version configured as "M2_HOME" and add it to the path.
                maven "M2_HOME"
            }

                  environment {
                               NEXUS_VERSION = "nexus3"
                               NEXUS_PROTOCOL = "http"
                               NEXUS_URL = "192.168.43.222:8081"
                               NEXUS_REPOSITORY = "Team1-Devops"
                               NEXUS_CREDENTIAL_ID = "Nexus-Credential"
                                    }

    stages {
        stage('Clone From Git') {
            steps {
                git branch: 'hanen_branch',
                url: 'https://github.com/AS-Byte/team1_devops_project.git',
                credentialsId: 'jenkins-assurance-token'
                   }
                        }
        stage('Mvn-VERSION') {
            steps {
                sh """mvn -version"""
                  }
                        }

        stage('Mvn-ClEAN') {
            steps {
                 sh """mvn clean install -P autoInstallPackage -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true"""
                    }
                            }
        stage('Mvn-COMPILE') {
            steps {
                  sh """mvn compile"""
                   }
                              }

                  stage('Mvn-Build') {
                              steps {
                              script{

                              sh """mvn -Dmaven.test.failure.ignore=true clean package"""
                              }

                                     }
                                     }

                  stage('Mvn-Test') {
                                     steps {
                                           script{

                                          sh """mvn test"""
                                                   }

                                                 }
                                       }



        stage('Mvn-SONARQUBE') {
            steps {
            withSonarQubeEnv(installationName: 'sq2')
                {sh """mvn sonar:sonar"""}

                   }
                              }



            stage('Upload Jar To NEXUS') {

                         steps {
                                script{

                                     pom = readMavenPom file: "pom.xml";
                                    filesByGlob = findFiles(glob:"target/*.${pom.packaging}");
                                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length}";
                                    artifactPath = filesByGlob[0].path;
                                    artifactExists = fileExists artifactPath;
                                    if(artifactExists){
                                                   echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging},version: ${pom.version}";
                                                     nexusArtifactUploader(
                                                                        nexusVersion:NEXUS_VERSION,
                                                                        protocol:NEXUS_PROTOCOL,
                                                                        nexusUrl:NEXUS_URL,
                                                                        groupId: pom.groupId,
                                                                        version:pom.version,
                                                                        repository:NEXUS_REPOSITORY,
                                                                        credentialsId:NEXUS_CREDENTIAL_ID,

                                                                        artifacts :[
                                                                                   [ artifactId: pom.artifactId,
                                                                                     classifier: '',
                                                                                     file: artifactPath,
                                                                                     type: pom.packaging],
                                                                                     [artifactId: pom.artifactId,
                                                                                      classifier: '',
                                                                                      file:"pom.xml",
                                                                                      type: "pom"
                                                                                      ]
                                                                                    ]
                                                                                    );
                                                                                }
                                                                                else{
                                                                                error "*** File: ${artifactPath},inexistant ";
                                                                                }

                                   }
                            }

                }




    }
   }
