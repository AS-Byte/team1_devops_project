pipeline {
    agent any
    tools {
          // Install the Maven version configured as "M2_HOME" and add it to the path.
          maven 'MAVEN_HOME'
          jdk 'JAVA_HOME'
        }
    environment {
           NEXUS_VERSION = "nexus3"
           NEXUS_PROTOCOL = "http"
           NEXUS_URL = "192.168.215.200:8081"
           NEXUS_REPOSITORY = "Team1-Devops"
           NEXUS_CREDENTIAL_ID = "NEXUS_CRED"
    }

    stages {
       stage('Clone From Git') {
            steps {
                git branch: 'amine_branch',
                url: 'https://github.com/AS-Byte/team1_devops_project.git',
                credentialsId: 'git_pwd_pat'
            }
       }
       stage('MVN-BUILD') {
            steps {
                script{
                    sh """mvn clean"""
                    sh """mvn -Dmaven.test.failure.ignore=true clean package"""
                }
            }
       }
/*
       stage("Publish to Nexus Repos Manager") {
           steps {
               script {
                   pom = readMavenPom file: "pom.xml";
                   filesByGlob = findFiles(glob: "target *//*.${pom.packaging}");
                   echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                   artifactPath = filesByGlob[0].path;
                   artifactExists = fileExists artifactPath;

                   if(artifactExists) {
                       echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                       nexusArtifactUploader(
                           nexusVersion:NEXUS_VERSION,
                           protocol:NEXUS_PROTOCOL,
                           nexusUrl:NEXUS_URL,
                           groupId: pom.groupId,
                           version:pom.version,
                           repository:NEXUS_REPOSITORY,
                           credentialsId:NEXUS_CREDENTIAL_ID,

                           artifacts: [
                               [artifactId: pom.artifactId,
                               classifier: '',
                               file: artifactPath,
                               type: pom.packaging],
                               [artifactId: pom.artifactId,
                               classifier: '',
                               file: "pom.xml",
                               type: "pom"]
                           ]
                       );
                   } else {
                       error "*** File: ${artifactPath}, could not be found";
                   }
               }
           }
       } */

       stage('Build Docker image') {
                   steps {
                       sh 'sudo docker build -t my-docker-image .'
                   }
               }
       stage('Tag Docker image') {
           steps {
               sh '''
                   sudo docker login -u asbyte -p Sixr95HC2zASp9E
                   dockerImage=\$(docker images my-docker-image -q)
                   sudo docker tag \$dockerImage \$dockerImage-\$BUILD_NUMBER
                   sudo docker push \$dockerImage-\$BUILD_NUMBER
               '''
           }
       }


       /*
       stage('Build docker image') {
           steps{
               script {
                   sh 'docker build .'
               }
           }
       }
       stage('Tag Docker image') {
          steps {
              script {
                  docker.withRegistry('https://registry.hub.docker.com', 'dockerhub_pwd') {
                      def dockerImage = docker.image('my-docker-image')
                      dockerImage.tag("${env.BUILD_NUMBER}")
                  }
              }
          }
      }
      stage('Push Docker image') {
         steps {
             script {
                 docker.withRegistry('https://registry.hub.docker.com', 'dockerhub_pwd') {
                     def dockerImage = docker.image('my-docker-image')
                     dockerImage.push("${env.BUILD_NUMBER}")
                 }
             }
         }
     }
      */
    }
}

/*
o   Récupérer le projet à partir de gitHub/gitLab

o   Créer le livrable du projet

o   Lancer les tests unitaires

o   Lancer le test de qualité du code (SonarQube)

o   Déposer le livrable sur Nexus

o   Build de l’image (partie spring)

o   Création du livrable Spring à partir du fichier DockerFile

o   Déposer l'image créée sur DockerHub

o   Lancer simultanément en utilisant docker-compose l'image contenant le livrable spring et l'image MySQL

o   Tester les services de l'application avec  postman ou « Swagger ». Un simple ajout d'une ligne suivi d'un get de l'élément ajouté est suffisant */
