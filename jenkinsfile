pipeline {
    agent any
    tools {
          // Install the Maven version configured as "M2_HOME" and add it to the path.
          maven 'MAVEN_HOME'
          jdk 'JAVA_HOME'
        }
    environment {
           NEXUS_VERSION = "nexus3"
           NEXUS_PROTOCOL = "http"
           NEXUS_URL = "192.168.215.200:8081"
           NEXUS_REPOSITORY = "Team1-Devops"
           NEXUS_CREDENTIAL_ID = "NEXUS_CRED"
    }

    stages {
       stage('Clean Before Clone'){
            steps{
                sh """rm -rf *"""
            }
       }
       stage('Clone From Git') {
            steps {
                git branch: 'amine_branch',
                url: 'https://github.com/AS-Byte/team1_devops_project.git',
                credentialsId: 'git_pwd_pat'
            }
       }
       stage('MVN-VERSION') {
            steps {
                sh """mvn -version"""
            }
       }
       stage('MVN-CLEAN') {
            steps {
                sh """mvn clean"""
            }
       }
       stage('MVN-COMPILE') {
            steps {
                sh """mvn compile"""
            }
       }
       stage('MVN-BUILD') {
            steps {
                script{
                    sh """mvn -Dmaven.test.failure.ignore=true clean package"""
                }
            }
       }
       stage('MVN-TEST') {
            steps {
                script{
                    sh """mvn test"""
                }
            }
       }
       stage('MVN-SONARQUBE') {
            steps {
                withSonarQubeEnv('SonarQube'){
                    sh """mvn sonar:sonar"""
                }
            }
       }
       stage("Publish to Nexus Repository Manager") {
           steps {
               script {
                   pom = readMavenPom file: "pom.xml";
                   filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                   echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                   artifactPath = filesByGlob[0].path;
                   artifactExists = fileExists artifactPath;

                   if(artifactExists) {
                       echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                       nexusArtifactUploader(
                           nexusVersion: 'nexus3',
                           protocol: 'http',
                           nexusUrl: '192.168.215.200',
                           groupId: pom.groupId,
                           version: pom.version,
                           repository: 'Team1-Devops',
                           credentialsId: 'NEXUS_CRED',
                           artifacts: [
                               [artifactId: pom.artifactId,
                               classifier: '',
                               file: artifactPath,
                               type: pom.packaging],
                               [artifactId: pom.artifactId,
                               classifier: '',
                               file: "pom.xml",
                               type: "pom"]
                           ]
                       );
                   } else {
                       error "*** File: ${artifactPath}, could not be found";
                   }
               }
           }
       }
    }
}